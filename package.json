{
  "name": "sfcc-beaver",
  "displayName": "SFCC Beaver",
  "description": "An extension for SFCC developers to automate routine tasks",
  "version": "3.5.0",
  "icon": "static/simpleLogo.png",
  "repository": "https://github.com/foegit/sfcc-beaver",
  "publisher": "SerhiiHlavatskyi",
  "engines": {
    "vscode": "^1.66.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "sfcc",
    "salesforce",
    "demandware",
    "dw",
    "cartridge",
    "commerce cloud",
    "pwakit",
    "ocapi",
    "scapi"
  ],
  "activationEvents": [
    "workspaceContains:**/.project"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": "steptypes.json",
        "url": "https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/steptypes.schema.json"
      },
      {
        "fileMatch": "hooks.json",
        "url": "./static/schemas/hooks.schema.json"
      }
    ],
    "configuration": {
      "title": "SFCC Beaver",
      "properties": {
        "sfccBeaver.copy.addLineNumberForUnix": {
          "type": "boolean",
          "default": false,
          "description": "Adds line number (#11) for extracted unix path."
        },
        "sfccBeaver.cartridges.pinnedCartridges": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Name of the cartridge"
          },
          "default": [],
          "description": "Comma separated list of pinned cartridges."
        },
        "sfccBeaver.hooks.pinnedHooks": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Name of the hook"
          },
          "default": [],
          "description": "Comma separated list of pinned hooks."
        },
        "sfccBeaver.hooks.viewMode": {
          "type": "string",
          "enum": [
            "list",
            "tag"
          ],
          "enumDescriptions": [
            "Hooks shown one by one. Default mode",
            "Hooks grouped by tags. By default each hook has a tag = first word before . e.g. app for app.custom.hook"
          ],
          "default": "list",
          "description": "Display mode for hooks view"
        },
        "sfccBeaver.hooks.singeHookViewMode": {
          "type": "string",
          "enum": [
            "compact",
            "full"
          ],
          "enumDescriptions": [
            "Single hooks are combined into one item: Hook Label",
            "Single hooks are expandable: Hook Label > Hook Implementation"
          ],
          "default": "compact",
          "description": "Display mode for single hooks"
        },
        "sfccBeaver.general.isSFCCProject": {
          "type": "boolean",
          "default": "false",
          "description": "Internal setting. Don't modify it. If you need to disable extension for the current workspace do so from the extension page (View > Extensions > SFCC Beaver)"
        }
      }
    },
    "commands": [
      {
        "command": "sfccBeaver.extract",
        "title": "▰ Extract",
        "icon": "static/icons/extract.svg"
      },
      {
        "command": "sfccBeaver.override",
        "title": "▰ Override",
        "icon": "static/icons/override.svg"
      },
      {
        "command": "sfccBeaver.unixpath",
        "title": "▰ Copy unix path"
      },
      {
        "command": "sfccBeaver.refreshCartridgeList",
        "title": "Refresh Cartridges List",
        "icon": "$(refresh)"
      },
      {
        "command": "sfccBeaver.pinCartridge",
        "title": "Pin Cartridge",
        "icon": "$(pin)"
      },
      {
        "command": "sfccBeaver.unpinCartridge",
        "title": "Unpin Cartridge",
        "icon": "$(close)"
      },
      {
        "command": "sfccBeaver.hooks.refreshView",
        "title": "Refresh Hooks List",
        "icon": "$(refresh)"
      },
      {
        "command": "sfccBeaver.hooks.openImplementation",
        "title": "Open Hook File",
        "icon": "$(go-to-file)"
      },
      {
        "command": "sfccBeaver.hooks.openHookDefinition",
        "title": "Open hooks.js",
        "icon": "$(references)"
      },
      {
        "command": "sfccBeaver.hooks.pin",
        "title": "Pin Hook",
        "icon": "$(pin)"
      },
      {
        "command": "sfccBeaver.hooks.unpin",
        "title": "Unpin Hook",
        "icon": "$(pin)"
      },
      {
        "command": "sfccBeaver.hooks.copyName",
        "title": "Copy Hook Name",
        "icon": "$(copy)"
      },
      {
        "command": "sfccBeaver.hooks.useListView",
        "title": "View as List ",
        "icon": "$(list-flat)"
      },
      {
        "command": "sfccBeaver.hooks.useTagView",
        "title": "View as Tags",
        "icon": "$(tag)"
      },
      {
        "command": "sfccBeaver.hooks.useCompactView",
        "title": "Compact View for Single Hooks",
        "icon": "$(group-by-ref-type)"
      },
      {
        "command": "sfccBeaver.hooks.useFullView",
        "title": "Full View for Single Hooks",
        "icon": "$(ungroup-by-ref-type)"
      },
      {
        "command": "sfccBeaver.hooks.search",
        "title": "Search",
        "icon": "$(search)"
      },
      {
        "command": "sfccBeaver.hooks.filter",
        "title": "Filter",
        "icon": "$(filter)"
      },
      {
        "command": "sfccBeaver.hooks.filterDoubleClick",
        "title": "Filter"
      },
      {
        "command": "sfccBeaver.hooks.clearFilter",
        "title": "Clear Filter",
        "icon": "$(trash)"
      },
      {
        "command": "sfccBeaver.hooks.collapseAll",
        "title": "Collapse All",
        "icon": "$(collapse-all)"
      },
      {
        "command": "sfccBeaver.openDocsDetails",
        "title": "Open Documentation Details"
      },
      {
        "command": "sfccBeaver.openClassDetails",
        "title": "Open Class Documentation"
      },
      {
        "command": "sfccBeaver.docsOpenInBrowser",
        "title": "Open Class Documentation",
        "icon": "$(link-external)"
      },
      {
        "command": "sfccBeaver.docsCopyToClipboard",
        "title": "Copy link to clipboard",
        "icon": "$(copy)"
      },
      {
        "command": "sfccBeaver.docsNavigationBack",
        "title": "Go back",
        "icon": "$(arrow-left)"
      },
      {
        "command": "sfccBeaver.docsNavigationForward",
        "title": "Go forward",
        "icon": "$(arrow-right)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "sfccBeaver.extract",
          "when": "resourcePath =~ /.*(\\/|\\\\)cartridge(\\/|\\\\).*/"
        },
        {
          "command": "sfccBeaver.override",
          "when": "resourcePath =~ /.*(\\/|\\\\)cartridge(\\/|\\\\).*/"
        },
        {
          "command": "sfccBeaver.pinCartridge",
          "when": "false"
        },
        {
          "command": "sfccBeaver.unpinCartridge",
          "when": "false"
        },
        {
          "command": "sfccBeaver.openClassDetails",
          "when": "false"
        },
        {
          "command": "sfccBeaver.openDocsDetails",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "sfccBeaver.refreshCartridgeList",
          "when": "view == cartridgesObserver",
          "group": "navigation"
        },
        {
          "command": "sfccBeaver.hooks.useListView",
          "when": "view == hooksObserver && config.sfccBeaver.hooks.viewMode !== list",
          "group": "additional"
        },
        {
          "command": "sfccBeaver.hooks.useTagView",
          "when": "view == hooksObserver && config.sfccBeaver.hooks.viewMode !== tag",
          "group": "additional"
        },
        {
          "command": "sfccBeaver.hooks.useCompactView",
          "when": "view == hooksObserver && config.sfccBeaver.hooks.singeHookViewMode !== compact",
          "group": "additional"
        },
        {
          "command": "sfccBeaver.hooks.useFullView",
          "when": "view == hooksObserver && config.sfccBeaver.hooks.singeHookViewMode !== full",
          "group": "additional"
        },
        {
          "command": "sfccBeaver.hooks.search",
          "when": "view == hooksObserver",
          "group": "navigation@1"
        },
        {
          "command": "sfccBeaver.hooks.refreshView",
          "when": "view == hooksObserver",
          "group": "navigation@3"
        },
        {
          "command": "sfccBeaver.hooks.collapseAll",
          "when": "view == hooksObserver",
          "group": "navigation@4"
        }
      ],
      "view/item/context": [
        {
          "command": "sfccBeaver.pinCartridge",
          "when": "view == cartridgesObserver && viewItem == sfccCartridgeTreeItem",
          "group": "inline"
        },
        {
          "command": "sfccBeaver.unpinCartridge",
          "when": "view == cartridgesObserver && viewItem == sfccPinnedCartridgeTreeItem",
          "group": "inline"
        },
        {
          "command": "sfccBeaver.hooks.clearFilter",
          "when": "view == hooksObserver && viewItem == hooksFilterTreeBarApplied",
          "group": "inline"
        },
        {
          "command": "sfccBeaver.hooks.copyName",
          "when": "view == hooksObserver && viewItem =~ /hookLabelTreeItem/",
          "group": "inline@1"
        },
        {
          "command": "sfccBeaver.hooks.pin",
          "when": "view == hooksObserver && viewItem =~ /hookLabelTreeItem/ && !(viewItem =~ /hookLabelTreeItem.*pinned/)",
          "group": "inline@3"
        },
        {
          "command": "sfccBeaver.hooks.unpin",
          "when": "view == hooksObserver && viewItem =~ /hookLabelTreeItem.*pinned/",
          "group": "inline@3"
        },
        {
          "command": "sfccBeaver.hooks.openHookDefinition",
          "when": "view == hooksObserver && viewItem == hookFileItem",
          "group": "inline@2"
        },
        {
          "command": "sfccBeaver.hooks.openHookDefinition",
          "when": "view == hooksObserver && viewItem =~ /hookLabelTreeItem.*compact/",
          "group": "inline@2"
        }
      ],
      "editor/title": [
        {
          "command": "sfccBeaver.docsOpenInBrowser",
          "group": "navigation@2",
          "when": "activeWebviewPanelId == docsViewer"
        },
        {
          "command": "sfccBeaver.docsCopyToClipboard",
          "group": "navigation@2",
          "when": "activeWebviewPanelId == docsViewer"
        },
        {
          "command": "sfccBeaver.docsNavigationBack",
          "group": "navigation@1",
          "when": "activeWebviewPanelId == docsViewer"
        },
        {
          "command": "sfccBeaver.docsNavigationForward",
          "group": "navigation@1",
          "when": "activeWebviewPanelId == docsViewer"
        },
        {
          "command": "sfccBeaver.extract",
          "group": "navigation@2",
          "when": "resourcePath =~ /.*(\\/|\\\\)cartridge(\\/|\\\\).*/ && resourcePath =~ /^((?!cartridge(\\/|\\\\)client).)*$/ && !isInDiffEditor"
        },
        {
          "command": "sfccBeaver.override",
          "group": "navigation@2",
          "when": "resourcePath =~ /.*(\\/|\\\\)cartridge(\\/|\\\\).*/ && !isInDiffEditor"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "beaver-dam",
          "title": "Beaver Dam",
          "icon": "static/simpleLogo.svg"
        }
      ]
    },
    "views": {
      "beaver-dam": [
        {
          "name": "Cartridges",
          "id": "cartridgesObserver",
          "contextualTitle": "Cartridge Overview",
          "when": "config.sfccBeaver.general.isSFCCProject == true || sfccBeaver.extActivated"
        },
        {
          "name": "Documentation",
          "id": "docsNavigator",
          "type": "webview",
          "contextualTitle": "Documentation Search",
          "when": "config.sfccBeaver.general.isSFCCProject == true || sfccBeaver.extActivated"
        },
        {
          "name": "Hooks",
          "id": "hooksObserver",
          "contextualTitle": "Hooks Overview",
          "when": "config.sfccBeaver.general.isSFCCProject == true || sfccBeaver.extActivated"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "unit": "mocha --require ts-node/register src/test/unit/**/*.ts",
    "rc-minor": "vsce publish --pre-release minor",
    "rc-major": "vsce publish --pre-release major",
    "release-patch": "vsce publish patch",
    "release-minor": "vsce publish minor",
    "release-major": "vsce publish major"
  },
  "devDependencies": {
    "@types/chai": "^4.3.1",
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.66.0",
    "@typescript-eslint/eslint-plugin": "^5.16.0",
    "@typescript-eslint/parser": "^5.16.0",
    "@vscode/test-electron": "^2.1.3",
    "chai": "^4.3.6",
    "eslint": "^8.11.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.2",
    "sass": "^1.54.8",
    "sass-loader": "^13.0.2",
    "ts-loader": "^9.2.8",
    "ts-node": "^10.7.0",
    "typescript": "^4.6.3",
    "webpack": "^5.74.0",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "@types/vscode-webview": "^1.57.0",
    "axios": "^0.27.2",
    "cash-dom": "^8.1.1",
    "cheerio": "^1.0.0-rc.12",
    "fast-glob": "^3.2.11",
    "normalize-url": "^7.0.3"
  }
}
